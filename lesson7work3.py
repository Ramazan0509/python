__author__ = 'Magomedov Ramazan'
"""Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его 
конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть 
реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (
__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, 
уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно 
осуществляться округление значения до целого числа. 
- Сложение. Объединение двух клеток. При этом число ячеек общей 
клетки должно равняться сумме ячеек исходных двух клеток. 
- Вычитание. Участвуют две клетки. Операцию необходимо 
выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение. 
- Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек 
этих двух клеток. 
- Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное 
деление количества ячеек этих двух клеток. 
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. 
Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку 
вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование 
ряда не хватает, то в последний ряд записываются все оставшиеся."""
class Cell:

    def __init__(self, cell_count: int = 1):
        self.cell_count = cell_count

    def __add__(self, other):
        return self.cell_count + other.cell_count

    def __sub__(self, other):
        if (self.cell_count - other.cell_count) < 0:
            return f'Ошибка операции: разница имеет отрицательный результат.'
        else:
            return self.cell_count - other.cell_count

    def __mul__(self, other):
        return self.cell_count * other.cell_count

    def __truediv__(self, other):
        return self.cell_count // other.cell_count

    def make_order(self, cells_in_row: int):
        master = self.cell_count // cells_in_row
        slave = self.cell_count % cells_in_row
        result = ('*' * cells_in_row + '\n') * master + '*' * slave + '\n'
        return result

''' Определение клеток'''
A = Cell(12)
B = Cell(15)

''' Операции с клетками'''
C = A + B
D1 = A - B
D2 = B - A
E = A * B
F = A / B

''' Блок вывода результатов операций'''
print(f'Сложениe: {C}')
print(f'Вычитание А-В: {D1}')
print(f'Вычитание В-А: {D2}')
print(f'Умножение: {E}')
print(f'Деление целочисленное: {F}')

''' Блок вывода результатов метода make_order()'''
print('\n--- Печать клеток ---')
print(A.make_order(7))
print(B.make_order(6))